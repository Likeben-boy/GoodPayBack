generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model addresses {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  recipient       String    @db.VarChar(50)
  phone           String    @db.VarChar(20)
  province        String    @db.VarChar(50)
  city            String    @db.VarChar(50)
  district        String    @db.VarChar(50)
  detailedAddress String    @map("detailed_address") @db.VarChar(200)
  postalCode      String?   @map("postal_code") @db.VarChar(10)
  isDefault       Boolean?  @default(false) @map("is_default")
  createdAt       DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt       DateTime? @map("deleted_at") @db.DateTime(0)
  users           users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "addresses_ibfk_1")

  @@index([userId], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id          Int          @id @default(autoincrement())
  username    String       @unique(map: "username") @db.VarChar(50)
  email       String       @unique(map: "email") @db.VarChar(100)
  phone       String?      @unique(map: "phone") @db.VarChar(20)
  password    String       @db.VarChar(255)
  nickname    String?      @default("") @db.VarChar(50)
  avatar      String?      @db.VarChar(255)
  status      users_status @default(active)
  lastLoginAt DateTime?    @map("last_login_at") @db.DateTime(0)
  lastLoginIp String?      @map("last_login_ip") @db.VarChar(45)
  createdAt   DateTime     @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt   DateTime?    @map("deleted_at") @db.DateTime(0)
  addresses   addresses[]

  @@index([email], map: "idx_email")
  @@index([phone], map: "idx_phone")
  @@index([username], map: "idx_username")
}

enum users_status {
  active
  inactive
  banned
}
