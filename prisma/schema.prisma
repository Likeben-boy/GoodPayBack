generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Coupons {
  id             Int                 @id @default(autoincrement())
  couponName String              @db.VarChar(100) @map("coupon_name")
  couponType coupons_coupon_type @map("coupon_type")
  discountValue Decimal             @db.Decimal(10, 2) @map("discount_value")
  minAmount Decimal?            @default(0.00) @db.Decimal(10, 2) @map("min_amount")
  maxDiscount Decimal?            @db.Decimal(10, 2) @map("max_discount")
  totalCount Int                 @default(0) @map("total_count")
  usedCount Int                 @default(0) @map("used_count")
  validFrom DateTime            @db.DateTime(0) @map("valid_from")
  validUntil DateTime            @db.DateTime(0) @map("valid_until")
  status         coupons_status      @default(active)
  createdAt DateTime            @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime            @default(now()) @db.DateTime(0) @map("updated_at")
  deletedAt DateTime?           @db.DateTime(0) @map("deleted_at")

  @@index([couponType], map: "idx_coupon_type")
  @@index([deletedAt], map: "idx_deleted_at")
  @@index([status], map: "idx_status")
  @@index([validFrom, validUntil], map: "idx_valid_period")
  @@map("coupons")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model DeliveryInfo {
  id                Int                           @id @default(autoincrement())
  orderId Int                           @unique(map: "uk_order_id") @map("order_id")
  deliveryUserId Int? @map("delivery_user_id")
  deliveryStatus delivery_info_delivery_status @default(assigned) @map("delivery_status")
  assignedAt DateTime?                     @db.DateTime(0) @map("assigned_at")
  pickedUpAt DateTime?                     @db.DateTime(0) @map("picked_up_at")
  deliveredAt DateTime?                     @db.DateTime(0) @map("delivered_at")
  deliveryDistance Decimal?                      @db.Decimal(8, 2) @map("delivery_distance")
  deliveryDuration Int? @map("delivery_duration")
  createdAt DateTime                      @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime                      @default(now()) @db.DateTime(0) @map("updated_at")

  @@index([deliveryStatus], map: "idx_delivery_status")
  @@index([deliveryUserId], map: "idx_delivery_user_id")
  @@map("delivery_info")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model DishCategories {
  id            Int      @id @default(autoincrement())
  restaurantId Int @map("restaurant_id")
  name          String   @db.VarChar(50)
  sortOrder Int      @default(0) @map("sort_order")
  status        Boolean  @default(true)
  createdAt DateTime @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime @default(now()) @db.DateTime(0) @map("updated_at")

  @@index([restaurantId], map: "idx_restaurant_id")
  @@index([sortOrder], map: "idx_sort_order")
  @@map("dish_categories")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Dishes {
  id            Int       @id @default(autoincrement())
  restaurantId Int @map("restaurant_id")
  categoryId Int @map("category_id")
  name          String    @db.VarChar(100)
  description   String?   @db.Text
  price         Decimal   @default(0.00) @db.Decimal(8, 2)
  image         String?   @db.VarChar(255)
  status        Boolean   @default(true)
  salesCount Int       @default(0) @map("sales_count")
  createdAt DateTime  @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime  @default(now()) @db.DateTime(0) @map("updated_at")
  deletedAt DateTime? @db.DateTime(0) @map("deleted_at")

  @@index([categoryId], map: "idx_category_id")
  @@index([deletedAt], map: "idx_deleted_at")
  @@index([price], map: "idx_price")
  @@index([restaurantId], map: "idx_restaurant_id")
  @@index([salesCount], map: "idx_sales_count")
  @@index([status], map: "idx_status")
  @@map("dishes")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model OrderItems {
  id            Int      @id @default(autoincrement())
  orderId Int @map("order_id")
  dishId Int @map("dish_id")
  dishName String   @db.VarChar(100) @map("dish_name")
  dishImage String?  @db.VarChar(255) @map("dish_image")
  dishPrice Decimal  @db.Decimal(8, 2) @map("dish_price")
  quantity      Int      @default(1)
  selectedSpec String?  @db.VarChar(100) @map("selected_spec")
  subtotal      Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @db.DateTime(0) @map("created_at")

  @@index([dishId], map: "idx_dish_id")
  @@index([orderId], map: "idx_order_id")
  @@map("order_items")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model OrderReviews {
  id            Int                  @id @default(autoincrement())
  orderId Int                  @unique(map: "uk_order_id") @map("order_id")
  userId Int @map("user_id")
  restaurantId Int @map("restaurant_id")
  rating        Int                  @db.TinyInt
  content       String?              @db.Text
  images        Json?
  replyContent String?              @db.Text @map("reply_content")
  replyTime DateTime?            @db.DateTime(0) @map("reply_time")
  status        order_reviews_status @default(published)
  createdAt DateTime             @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime             @default(now()) @db.DateTime(0) @map("updated_at")
  deletedAt DateTime?            @db.DateTime(0) @map("deleted_at")

  @@index([deletedAt], map: "idx_deleted_at")
  @@index([rating], map: "idx_rating")
  @@index([restaurantId], map: "idx_restaurant_id")
  @@index([status], map: "idx_status")
  @@map("order_reviews")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model OrderStatusLogs {
  id            Int                              @id @default(autoincrement())
  orderId Int @map("order_id")
  oldStatus String?                          @db.VarChar(20) @map("old_status")
  newStatus String                           @db.VarChar(20) @map("new_status")
  operatorId Int? @map("operator_id")
  operatorType order_status_logs_operator_type? @default(system) @map("operator_type")
  remark        String?                          @db.VarChar(255)
  createdAt DateTime                         @default(now()) @db.DateTime(0) @map("created_at")

  @@index([createdAt], map: "idx_created_at")
  @@index([orderId], map: "idx_order_id")
  @@map("order_status_logs")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Orders {
  id                      Int                    @id @default(autoincrement())
  orderNumber String                 @unique(map: "order_number") @db.VarChar(32) @map("order_number")
  userId Int @map("user_id")
  restaurantId Int @map("restaurant_id")
  addressId Int @map("address_id")
  contactName String                 @db.VarChar(50) @map("contact_name")
  contactPhone String                 @db.VarChar(20) @map("contact_phone")
  deliveryAddress String                 @db.VarChar(255) @map("delivery_address")
  orderStatus orders_order_status    @default(created) @map("order_status")
  paymentStatus orders_payment_status  @default(pending) @map("payment_status")
  paymentMethod orders_payment_method? @map("payment_method")
  subtotal                Decimal                @default(0.00) @db.Decimal(10, 2)
  deliveryFee Decimal                @default(0.00) @db.Decimal(10, 2) @map("delivery_fee")
  discountAmount Decimal                @default(0.00) @db.Decimal(10, 2) @map("discount_amount")
  totalAmount Decimal                @default(0.00) @db.Decimal(10, 2) @map("total_amount")
  couponId Int? @map("coupon_id")
  orderNote String?                @db.Text @map("order_note")
  deliveryTime String?                @db.VarChar(100) @map("delivery_time")
  estimatedDeliveryTime DateTime?              @db.DateTime(0) @map("estimated_delivery_time")
  actualDeliveryTime DateTime?              @db.DateTime(0) @map("actual_delivery_time")
  createdAt DateTime               @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime               @default(now()) @db.DateTime(0) @map("updated_at")
  paidAt DateTime?              @db.DateTime(0) @map("paid_at")
  completedAt DateTime?              @db.DateTime(0) @map("completed_at")
  cancelledAt DateTime?              @db.DateTime(0) @map("cancelled_at")
  cancelReason String?                @db.VarChar(255) @map("cancel_reason")
  deletedAt DateTime?              @db.DateTime(0) @map("deleted_at")

  @@index([createdAt], map: "idx_created_at")
  @@index([deletedAt], map: "idx_deleted_at")
  @@index([orderNumber], map: "idx_order_number")
  @@index([orderStatus], map: "idx_order_status")
  @@index([paymentStatus], map: "idx_payment_status")
  @@index([restaurantId], map: "idx_restaurant_id")
  @@index([userId], map: "idx_user_id")
  @@map("orders")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PaymentRecords {
  id             Int                            @id @default(autoincrement())
  orderId Int @map("order_id")
  userId Int @map("user_id")
  paymentMethod payment_records_payment_method @map("payment_method")
  paymentAmount Decimal                        @db.Decimal(10, 2) @map("payment_amount")
  transactionId String?                        @db.VarChar(100) @map("transaction_id")
  paymentStatus payment_records_payment_status @default(pending) @map("payment_status")
  paymentTime DateTime?                      @db.DateTime(0) @map("payment_time")
  failureReason String?                        @db.VarChar(255) @map("failure_reason")
  createdAt DateTime                       @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime                       @default(now()) @db.DateTime(0) @map("updated_at")

  @@index([orderId], map: "idx_order_id")
  @@index([paymentStatus], map: "idx_payment_status")
  @@index([transactionId], map: "idx_transaction_id")
  @@index([userId], map: "idx_user_id")
  @@map("payment_records")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model RefundRecords {
  id                    Int                            @id @default(autoincrement())
  orderId Int @map("order_id")
  userId Int @map("user_id")
  paymentRecordId Int @map("payment_record_id")
  refundAmount Decimal                        @db.Decimal(10, 2) @map("refund_amount")
  refundReason String                         @db.VarChar(255) @map("refund_reason")
  refundType refund_records_refund_type     @default(full) @map("refund_type")
  refundStatus refund_records_refund_status   @default(pending) @map("refund_status")
  refundMethod refund_records_refund_method?  @default(original) @map("refund_method")
  refundTransactionId String?                        @db.VarChar(100) @map("refund_transaction_id")
  processorId Int? @map("processor_id")
  processorType refund_records_processor_type? @default(system) @map("processor_type")
  processRemark String?                        @db.VarChar(255) @map("process_remark")
  processedAt DateTime?                      @db.DateTime(0) @map("processed_at")
  completedAt DateTime?                      @db.DateTime(0) @map("completed_at")
  createdAt DateTime                       @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime                       @default(now()) @db.DateTime(0) @map("updated_at")

  @@index([createdAt], map: "idx_created_at")
  @@index([orderId], map: "idx_order_id")
  @@index([refundStatus], map: "idx_refund_status")
  @@index([userId], map: "idx_user_id")
  @@map("refund_records")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model RestaurantTagMaster {
  id         Int                             @id @default(autoincrement())
  tagName String                          @unique(map: "tag_name") @db.VarChar(50) @map("tag_name")
  tagType restaurant_tag_master_tag_type? @default(cuisine) @map("tag_type")
  color      String?                         @default("#ff6b6b") @db.VarChar(7)
  icon       String?                         @db.VarChar(100)
  sortOrder Int                             @default(0) @map("sort_order")
  status     Boolean                         @default(true)
  createdAt DateTime                        @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime                        @default(now()) @db.DateTime(0) @map("updated_at")

  @@index([sortOrder], map: "idx_sort_order")
  @@index([status], map: "idx_status")
  @@index([tagType], map: "idx_tag_type")
  @@map("restaurant_tag_master")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model RestaurantTagRelations {
  id            Int      @id @default(autoincrement())
  restaurantId Int @map("restaurant_id")
  tagId Int @map("tag_id")
  createdAt DateTime @default(now()) @db.DateTime(0) @map("created_at")
  createdBy Int? @map("created_by")

  @@unique([restaurantId, tagId], map: "uk_restaurant_tag")
  @@index([restaurantId], map: "idx_restaurant_id")
  @@index([tagId], map: "idx_tag_id")
  @@map("restaurant_tag_relations")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model RestaurantTagStats {
  tagId Int       @id @map("tag_id")
  usageCount Int       @default(0) @map("usage_count")
  lastUsedAt DateTime? @db.DateTime(0) @map("last_used_at")
  @@map("restaurant_tag_stats")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Restaurants {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  image         String    @db.VarChar(255)
  rating        Decimal   @default(0.0) @db.Decimal(2, 1)
  distance      Decimal   @default(0.00) @db.Decimal(4, 2)
  deliveryFee Decimal   @default(0.00) @db.Decimal(5, 2) @map("delivery_fee")
  deliveryTime Int       @default(0) @map("delivery_time")
  status        Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime  @default(now()) @db.DateTime(0) @map("updated_at")
  deletedAt DateTime? @db.DateTime(0) @map("deleted_at")

  @@index([deletedAt], map: "idx_deleted_at")
  @@index([distance], map: "idx_distance")
  @@index([rating], map: "idx_rating")
  @@index([status], map: "idx_status")
  @@map("restaurants")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ShoppingCart {
  id            Int      @id @default(autoincrement())
  userId Int @map("user_id")
  restaurantId Int @map("restaurant_id")
  dishId Int @map("dish_id")
  quantity      Int      @default(1)
  price         Decimal  @db.Decimal(8, 2)
  createdAt DateTime @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime @default(now()) @db.DateTime(0) @map("updated_at")

  @@unique([userId, restaurantId, dishId], map: "uk_user_restaurant_dish")
  @@index([restaurantId], map: "idx_restaurant_id")
  @@index([userId], map: "idx_user_id")
  @@map("shopping_cart")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model UserAddresses {
  id             Int      @id @default(autoincrement())
  userId Int @map("user_id")
  contactName String   @db.VarChar(50) @map("contact_name")
  contactPhone String   @db.VarChar(20) @map("contact_phone")
  province       String   @db.VarChar(50)
  city           String   @db.VarChar(50)
  district       String   @db.VarChar(50)
  detailAddress String   @db.VarChar(255) @map("detail_address")
  isDefault Boolean  @default(false) @map("is_default")
  createdAt DateTime @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime @default(now()) @db.DateTime(0) @map("updated_at")

  @@index([isDefault], map: "idx_is_default")
  @@index([userId], map: "idx_user_id")
  @@map("user_addresses")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model UserCoupons {
  id          Int                 @id @default(autoincrement())
  userId Int @map("user_id")
  couponId Int @map("coupon_id")
  orderId Int? @map("order_id")
  status      user_coupons_status @default(unused)
  receivedAt DateTime            @default(now()) @db.DateTime(0) @map("received_at")
  usedAt DateTime?           @db.DateTime(0) @map("used_at")
  expiredAt DateTime            @db.DateTime(0) @map("expired_at")

  @@unique([userId, couponId, receivedAt], map: "uk_user_coupon")
  @@index([couponId], map: "idx_coupon_id")
  @@index([expiredAt], map: "idx_expired_at")
  @@index([status], map: "idx_status")
  @@index([userId], map: "idx_user_id")
  @@map("user_coupons")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Users {
  id         Int       @id @default(autoincrement())
  username   String    @db.VarChar(50)
  phone      String    @unique(map: "phone") @db.VarChar(20)
  password   String    @db.VarChar(255)
  avatar     String?   @db.VarChar(255)
  status     Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt DateTime  @default(now()) @db.DateTime(0) @map("updated_at")
  deletedAt DateTime? @db.DateTime(0) @map("deleted_at")

  @@index([deletedAt], map: "idx_deleted_at")
  @@index([phone], map: "idx_phone")
  @@index([status], map: "idx_status")
  @@index([username], map: "idx_username")
  @@map("users")
}

enum coupons_coupon_type {
  discount
  full_reduce
}

enum restaurant_tag_master_tag_type {
  cuisine
  feature
  price_range
  service
}

enum delivery_info_delivery_status {
  assigned
  picked_up
  delivering
  delivered
}

enum payment_records_payment_method {
  wechat
  alipay
  balance
  apple
}

enum user_coupons_status {
  unused
  used
  expired
}

enum order_status_logs_operator_type {
  user
  merchant
  delivery
  system
}

enum payment_records_payment_status {
  pending
  processing
  success
  failed
}

enum refund_records_refund_type {
  full
  partial
}

enum refund_records_refund_status {
  pending
  approved
  rejected
  completed
  failed
}

enum orders_order_status {
  created
  confirmed
  preparing
  delivering
  completed
  cancelled
}

enum refund_records_refund_method {
  original
  balance
}

enum order_reviews_status {
  published
  hidden
  deleted
}

enum orders_payment_status {
  pending
  processing
  success
  failed
  refunding
  refunded
}

enum coupons_status {
  active
  inactive
  expired
}

enum orders_payment_method {
  wechat
  alipay
  balance
  apple
}

enum refund_records_processor_type {
  user
  merchant
  system
}
